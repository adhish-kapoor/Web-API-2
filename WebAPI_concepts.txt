# Action Results in Web API 2
====================================
A Web API controller action can return any of the following:

1. void
2. HttpResponseMessage
3. IHttpActionResult
4. Some other type

Depending on which of these is returned, Web API uses a different mechanism to create the HTTP response.

TABLE 1
Return type              	    How Web API creates the response
void	                        Return empty 204 (No Content)
HttpResponseMessage	            Convert directly to an HTTP response message.
IHttpActionResult	            Call ExecuteAsync to create an HttpResponseMessage, then convert to an HTTP response message.
Other type	                    Write the serialized return value into the response body; return 200 (OK).

=> void
If the return type is void, Web API simply returns an empty HTTP response with status code 204 (No Content).

Example controller:
public class ValuesController : ApiController
{
    public void Post()
    {
    }
}

HTTP response:
HTTP/1.1 204 No Content
Server: Microsoft-IIS/8.0
Date: Mon, 27 Jan 2014 02:13:26 GMT

=> HttpResponseMessage
If the action returns an HttpResponseMessage, Web API converts the return value directly into an HTTP response message, 
using the properties of the HttpResponseMessage object to populate the response.

This option gives you a lot of control over the response message. 
For example, the following controller action sets the Cache-Control header.

public class ValuesController : ApiController
{
    public HttpResponseMessage Get()
    {
        HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.OK, "value");
        response.Content = new StringContent("hello", Encoding.Unicode);
        response.Headers.CacheControl = new CacheControlHeaderValue()
        {
            MaxAge = TimeSpan.FromMinutes(20)
        };
        return response;
    } 
}

Response:
HTTP/1.1 200 OK
Cache-Control: max-age=1200
Content-Length: 10
Content-Type: text/plain; charset=utf-16
Server: Microsoft-IIS/8.0
Date: Mon, 27 Jan 2014 08:53:35 GMT

hello

If you pass a domain model to the CreateResponse method, Web API uses a media formatter to write the serialized model into the response body.
public HttpResponseMessage Get()
{
    // Get a list of products from a database.
    IEnumerable<Product> products = GetProductsFromDB();

    // Write the list to the response body.
    HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.OK, products);
    return response;
}

Web API uses the Accept header in the request to choose the formatter.

=> IHttpActionResult
The IHttpActionResult interface was introduced in Web API 2. Essentially, it defines an HttpResponseMessage factory. 
Here are some advantages of using the IHttpActionResult interface:

1. Simplifies unit testing your controllers.
2. Moves common logic for creating HTTP responses into separate classes.
3. Makes the intent of the controller action clearer, by hiding the low-level details of constructing the response.

IHttpActionResult contains a single method, ExecuteAsync, which asynchronously creates an HttpResponseMessage instance.
public interface IHttpActionResult
{
    Task<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken);
}

If a controller action returns an IHttpActionResult, Web API calls the ExecuteAsync method to create an HttpResponseMessage. 
Then it converts the HttpResponseMessage into an HTTP response message.

Here is a simple implementation of IHttpActionResult that creates a plain text response:

public class TextResult : IHttpActionResult
{
    string _value;
    HttpRequestMessage _request;

    public TextResult(string value, HttpRequestMessage request)
    {
        _value = value;
        _request = request;
    }
    public Task<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken)
    {
        var response = new HttpResponseMessage()
        {
            Content = new StringContent(_value),
            RequestMessage = _request
        };
        return Task.FromResult(response);
    }
}

Example controller action:
public class ValuesController : ApiController
{
    public IHttpActionResult Get()
    {
        return new TextResult("hello", Request);
    }
}

Response:
HTTP/1.1 200 OK
Content-Length: 5
Content-Type: text/plain; charset=utf-8
Server: Microsoft-IIS/8.0
Date: Mon, 27 Jan 2014 08:53:35 GMT

hello

More often, you use the IHttpActionResult implementations defined in the System.Web.Http.Results namespace. 
The ApiController class defines helper methods that return these built-in action results.

In the following example, if the request does not match an existing product ID, the controller calls ApiController.NotFound to create a 404 (Not Found) response. 
Otherwise, the controller calls ApiController.OK, which creates a 200 (OK) response that contains the product.

public IHttpActionResult Get (int id)
{
    Product product = _repository.Get (id);
    if (product == null)
    {
        return NotFound(); // Returns a NotFoundResult
    }
    return Ok(product);  // Returns an OkNegotiatedContentResult
}

=> Other Return Types
For all other return types, Web API uses a media formatter to serialize the return value. 
Web API writes the serialized value into the response body. The response status code is 200 (OK).

public class ProductsController : ApiController
{
    public IEnumerable<Product> Get()
    {
        return GetAllProductsFromDB();
    }
}

A disadvantage of this approach is that you cannot directly return an error code, such as 404. 
However, you can throw an HttpResponseException for error codes.

Web API uses the Accept header in the request to choose the formatter. For more information, see Content Negotiation.
Example request
GET http://localhost/api/products HTTP/1.1
User-Agent: Fiddler
Host: localhost:24127
Accept: application/json

Example response
HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Server: Microsoft-IIS/8.0
Date: Mon, 27 Jan 2014 08:53:35 GMT
Content-Length: 56

[{"Id":1,"Name":"Yo-yo","Category":"Toys","Price":6.95}]


# Routing in ASP.NET Web API
======================================

=> Routing Tables
In ASP.NET Web API, a controller is a class that handles HTTP requests. The public methods of the controller are called action methods or simply actions.
When the Web API framework receives a request, it routes the request to an action.

To determine which action to invoke, the framework uses a routing table. The Visual Studio project template for Web API creates a default route:
This route is defined in the WebApiConfig.cs file, which is placed in the App_Start directory:
routes.MapHttpRoute(
    name: "API Default",
    routeTemplate: "api/{controller}/{id}",
    defaults: new { id = RouteParameter.Optional }
);

Each entry in the routing table contains a route template. The default route template for Web API is "api/{controller}/{id}". 
In this template, "api" is a literal path segment, and {controller} and {id} are placeholder variables.

When the Web API framework receives an HTTP request, it tries to match the URI against one of the route templates in the routing table. 
If no route matches, the client receives a 404 error. For example, the following URIs match the default route:

/api/contacts
/api/contacts/1
/api/products/gizmo1

However, the following URI does not match, because it lacks the "api" segment:
/contacts/1

The reason for using "api" in the route is to avoid collisions with ASP.NET MVC routing. 
That way, you can have "/contacts" go to an MVC controller, and "/api/contacts" go to a Web API controller.

Once a matching route is found, Web API selects the controller and the action:

1. To find the controller, Web API adds "Controller" to the value of the {controller} variable.
2. To find the action, Web API looks at the HTTP verb, and then looks for an action whose name begins with that HTTP verb name. 
For example, with a GET request, Web API looks for an action prefixed with "Get", such as "GetContact" or "GetAllContacts". 
This convention applies only to GET, POST, PUT, DELETE, HEAD, OPTIONS, and PATCH verbs. 
You can enable other HTTP verbs by using attributes on your controller. We'll see an example of that later.
3. Other placeholder variables in the route template, such as {id}, are mapped to action parameters.

public class ProductsController : ApiController
{
    public IEnumerable<Product> GetAllProducts() { }
    public Product GetProductById(int id) { }
    public HttpResponseMessage DeleteProduct(int id){ }
}

Here are some possible HTTP requests, along with the action that gets invoked for each:

TABLE 1
HTTP Verb	URI Path	        Action	            Parameter
GET	        api/products	    GetAllProducts	    (none)
GET	        api/products/4	    GetProductById	    4
DELETE	    api/products/4	    DeleteProduct	    4
POST	    api/products	    (no match)	
Notice that the {id} segment of the URI, if present, is mapped to the id parameter of the action. 
In this example, the controller defines two GET methods, one with an id parameter and one with no parameters.

Also, note that the POST request will fail, because the controller does not define a "Post..." method.

=> Routing Variations
Instead of using the naming convention for HTTP verbs, you can explicitly specify the HTTP verb for an action by decorating the action method with one of the following attributes:

[HttpGet]
[HttpPut]
[HttpPost]
[HttpDelete]
[HttpHead]
[HttpOptions]
[HttpPatch]

In the following example, the FindProduct method is mapped to GET requests:

public class ProductsController : ApiController
{
    [HttpGet]
    public Product FindProduct(id) {}
}

To allow multiple HTTP verbs for an action, or to allow HTTP verbs other than GET, PUT, POST, DELETE, HEAD, OPTIONS, and PATCH, 
use the [AcceptVerbs] attribute, which takes a list of HTTP verbs.

public class ProductsController : ApiController
{
    [AcceptVerbs("GET", "HEAD")]
    public Product FindProduct(id) { }

    // WebDAV method
    [AcceptVerbs("MKCOL")]
    public void MakeCollection() { }
}

=> Routing by Action Name
With the default routing template, Web API uses the HTTP verb to select the action. 
However, you can also create a route where the action name is included in the URI:

routes.MapHttpRoute(
    name: "ActionApi",
    routeTemplate: "api/{controller}/{action}/{id}",
    defaults: new { id = RouteParameter.Optional }
);

In this route template, the {action} parameter names the action method on the controller. 
With this style of routing, use attributes to specify the allowed HTTP verbs. 
For example, suppose your controller has the following method:

public class ProductsController : ApiController
{
    [HttpGet]
    public string Details(int id){}
}

In this case, a GET request for "api/products/details/1" would map to the Details method. 
This style of routing is similar to ASP.NET MVC, and may be appropriate for an RPC-style API.

You can override the action name by using the [ActionName] attribute. 
In the following example, there are two actions that map to "api/products/thumbnail/id. One supports GET and the other supports POST:

public class ProductsController : ApiController
{
    [HttpGet]
    [ActionName("Thumbnail")]
    public HttpResponseMessage GetThumbnailImage(int id);

    [HttpPost]
    [ActionName("Thumbnail")]
    public void AddThumbnailImage(int id);
}

=> Non-Actions
To prevent a method from getting invoked as an action, use the [NonAction] attribute. 
This signals to the framework that the method is not an action, even if it would otherwise match the routing rules.

// Not an action method.
[NonAction]  
public string GetPrivateData() { ... }

# Routing and Action Selection in ASP.NET Web API
=======================================================

Routing has three main phases:

1. Matching the URI to a route template.
2. Selecting a controller.
3. Selecting an action.

=> Route Templates
A route template looks similar to a URI path, but it can have placeholder values, indicated with curly braces:
"api/{controller}/public/{category}/{id}"

When you create a route, you can provide default values for some or all of the placeholders:
defaults: new { category = "all" }

You can also provide constraints, which restrict how a URI segment can match a placeholder:
constraints: new { id = @"\d+" }   // Only matches if "id" is one or more digits.

The framework tries to match the segments in the URI path to the template. Literals in the template must match exactly. 
A placeholder matches any value, unless you specify constraints. The framework does not match other parts of the URI, such as the host name or the query parameters. 
The framework selects the first route in the route table that matches the URI.

There are two special placeholders: "{controller}" and "{action}".

"{controller}" provides the name of the controller.
"{action}" provides the name of the action. In Web API, the usual convention is to omit "{action}".

=> Defaults
If you provide defaults, the route will match a URI that is missing those segments. For example:
routes.MapHttpRoute(
    name: "DefaultApi",
    routeTemplate: "api/{controller}/{category}",
    defaults: new { category = "all" }
);

The URIs http://localhost/api/products/all and http://localhost/api/products match the preceding route.
In the latter URI, the missing {category} segment is assigned the default value all.

=> Route Dictionary
If the framework finds a match for a URI, it creates a dictionary that contains the value for each placeholder. 
The keys are the placeholder names, not including the curly braces. 
The values are taken from the URI path or from the defaults. 
The dictionary is stored in the IHttpRouteData object.

A default can have the special value RouteParameter.Optional. 
If a placeholder gets assigned this value, the value is not added to the route dictionary. For example:
routes.MapHttpRoute(
    name: "DefaultApi",
    routeTemplate: "api/{controller}/{category}/{id}",
    defaults: new { category = "all", id = RouteParameter.Optional }
);

For the URI path "api/products", the route dictionary will contain:
controller: "products"
category: "all"

For "api/products/toys/123", however, the route dictionary will contain:
controller: "products"
category: "toys"
id: "123"

The defaults can also include a value that does not appear anywhere in the route template. 
If the route matches, that value is stored in the dictionary. For example:
routes.MapHttpRoute(
    name: "Root",
    routeTemplate: "api/root/{id}",
    defaults: new { controller = "customers", id = RouteParameter.Optional }
);

If the URI path is "api/root/8", the dictionary will contain two values:
controller: "customers"
id: "8"

=> Selecting a Controller
Controller selection is handled by the IHttpControllerSelector.SelectController method. 
This method takes an HttpRequestMessage instance and returns an HttpControllerDescriptor. 
The default implementation is provided by the DefaultHttpControllerSelector class. This class uses a straightforward algorithm:

1. Look in the route dictionary for the key "controller".
2. Take the value for this key and append the string "Controller" to get the controller type name.
3. Look for a Web API controller with this type name.

For example, if the route dictionary contains the key-value pair "controller" = "products", then the controller type is "ProductsController". 
If there is no matching type, or multiple matches, the framework returns an error to the client.

=> Action Selection
After selecting the controller, the framework selects the action by calling the IHttpActionSelector.SelectAction method. 
This method takes an HttpControllerContext and returns an HttpActionDescriptor.
The default implementation is provided by the ApiControllerActionSelector class.


# Attribute Routing in ASP.NET Web API 2
==============================================

=> Why Attribute Routing?
One advantage of convention-based routing is that templates are defined in a single place, and the routing rules are applied consistently across all controllers. 
Unfortunately, convention-based routing makes it hard to support certain URI patterns that are common in RESTful APIs.

/customers/1/orders

This type of URI is difficult to create using convention-based routing. 
Although it can be done, the results don't scale well if you have many controllers or resource types.

With attribute routing, it's trivial to define a route for this URI. You simply add an attribute to the controller action:
[Route("customers/{customerId}/orders")]
public IEnumerable<Order> GetOrdersByCustomer(int customerId) { ... }

Here are some other patterns that attribute routing makes easy.

API versioning
In this example, "/api/v1/products" would be routed to a different controller than "/api/v2/products".

/api/v1/products /api/v2/products

Overloaded URI segments
In this example, "1" is an order number, but "pending" maps to a collection.

/orders/1 /orders/pending

Multiple parameter types
In this example, "1" is an order number, but "2013/06/16" specifies a date.

/orders/1 /orders/2013/06/16

=> Enabling Attribute Routing
To enable attribute routing, call MapHttpAttributeRoutes during configuration. 
This extension method is defined in the System.Web.Http.HttpConfigurationExtensions class.

using System.Web.Http;

namespace WebApplication
{
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            // Web API routes
            config.MapHttpAttributeRoutes();

            // Other Web API configuration not shown.
        }
    }
}

Attribute routing can be combined with convention-based routing. To define convention-based routes, call the MapHttpRoute method.
public static class WebApiConfig
{
    public static void Register(HttpConfiguration config)
    {
        // Attribute routing.
        config.MapHttpAttributeRoutes();

        // Convention-based routing.
        config.Routes.MapHttpRoute(
            name: "DefaultApi",
            routeTemplate: "api/{controller}/{id}",
            defaults: new { id = RouteParameter.Optional }
        );
    }
}

=> Note: Migrating From Web API 1
Prior to Web API 2, the Web API project templates generated code like this:
protected void Application_Start()
{
    // WARNING - Not compatible with attribute routing.
    WebApiConfig.Register(GlobalConfiguration.Configuration);
}

If attribute routing is enabled, this code will throw an exception. 
If you upgrade an existing Web API project to use attribute routing, make sure to update this configuration code to the following:

protected void Application_Start()
{
    // Pass a delegate to the Configure method.
    GlobalConfiguration.Configure(WebApiConfig.Register);
}

=> Adding Route Attributes
public class OrdersController : ApiController
{
    [Route("customers/{customerId}/orders")]
    [HttpGet]
    public IEnumerable<Order> FindOrdersByCustomer(int customerId) { ... }
}

The string "customers/{customerId}/orders" is the URI template for the route. Web API tries to match the request URI to the template. 
In this example, "customers" and "orders" are literal segments, and "{customerId}" is a variable parameter. The following URIs would match this template:

http://localhost/customers/1/orders
http://localhost/customers/bob/orders
http://localhost/customers/1234-5678/orders

=> HTTP methods
The following example maps the CreateBook method to HTTP POST requests
[Route("api/books")]
[HttpPost]
public HttpResponseMessage CreateBook(Book book) { ... }

For all other HTTP methods, including non-standard methods, use the AcceptVerbs attribute, which takes a list of HTTP methods.
// WebDAV method
[Route("api/books")]
[AcceptVerbs("MKCOL")]
public void MakeCollection() { }

=> Route Prefixes
Often, the routes in a controller all start with the same prefix. For example:
public class BooksController : ApiController
{
    [Route("api/books")]
    public IEnumerable<Book> GetBooks() { ... }

    [Route("api/books/{id:int}")]
    public Book GetBook(int id) { ... }

    [Route("api/books")]
    [HttpPost]
    public HttpResponseMessage CreateBook(Book book) { ... }
}

You can set a common prefix for an entire controller by using the [RoutePrefix] attribute:
[RoutePrefix("api/books")]
public class BooksController : ApiController
{
    // GET api/books
    [Route("")]
    public IEnumerable<Book> Get() { ... }

    // GET api/books/5
    [Route("{id:int}")]
    public Book Get(int id) { ... }

    // POST api/books
    [Route("")]
    public HttpResponseMessage Post(Book book) { ... }
}

Use a tilde (~) on the method attribute to override the route prefix:
[RoutePrefix("api/books")]
public class BooksController : ApiController
{
    // GET /api/authors/1/books
    [Route("~/api/authors/{authorId:int}/books")]
    public IEnumerable<Book> GetByAuthor(int authorId) { ... }

    // ...
}

The route prefix can include parameters:
[RoutePrefix("customers/{customerId}")]
public class OrdersController : ApiController
{
    // GET customers/1/orders
    [Route("orders")]
    public IEnumerable<Order> Get(int customerId) { ... }
}

=> Route Constraints
Route constraints let you restrict how the parameters in the route template are matched. 
The general syntax is "{parameter:constraint}". 

[Route("users/{id:int}")]
public User GetUserById(int id) { ... }

[Route("users/{name}")]
public User GetUserByName(string name) { ... }

Here, the first route will only be selected if the "id" segment of the URI is an integer. Otherwise, the second route will be chosen.

Notice that some of the constraints, such as "min", take arguments in parentheses. 
You can apply multiple constraints to a parameter, separated by a colon.
[Route("users/{id:int:min(1)}")]
public User GetUserById(int id) { ... }

=> Route Names
In Web API, every route has a name. Route names are useful for generating links, so that you can include a link in an HTTP response.

To specify the route name, set the Name property on the attribute. 
The following example shows how to set the route name, and also how to use the route name when generating a link.

public class BooksController : ApiController
{
    [Route("api/books/{id}", Name="GetBookById")]
    public BookDto GetBook(int id) 
    {
        // Implementation not shown...
    }

    [Route("api/books")]
    public HttpResponseMessage Post(Book book)
    {
        // Validate and add book to database (not shown)

        var response = Request.CreateResponse(HttpStatusCode.Created);

        // Generate a link to the new book and set the Location header in the response.
        string uri = Url.Link("GetBookById", new { id = book.BookId });
        response.Headers.Location = new Uri(uri);
        return response;
    }
}

=> Route Order
When the framework tries to match a URI with a route, it evaluates the routes in a particular order. 
To specify the order, set the Order property on the route attribute. Lower values are evaluated first. The default order value is zero.

Here is how the total ordering is determined:

1. Compare the Order property of the route attribute.

2. Look at each URI segment in the route template. For each segment, order as follows:
    a. Literal segments.
    b. Route parameters with constraints.
    c. Route parameters without constraints.
    d. Wildcard parameter segments with constraints.
    e. Wildcard parameter segments without constraints.

3. In the case of a tie, routes are ordered by a case-insensitive ordinal string comparison (OrdinalIgnoreCase) of the route template.

Here is an example. Suppose you define the following controller:
[RoutePrefix("orders")]
public class OrdersController : ApiController
{
    [Route("{id:int}")] // constrained parameter
    public HttpResponseMessage Get(int id) { ... }

    [Route("details")]  // literal
    public HttpResponseMessage GetDetails() { ... }

    [Route("pending", RouteOrder = 1)]
    public HttpResponseMessage GetPending() { ... }

    [Route("{customerName}")]  // unconstrained parameter
    public HttpResponseMessage GetByCustomer(string customerName) { ... }

    [Route("{*date:datetime}")]  // wildcard
    public HttpResponseMessage Get(DateTime date) { ... }
}

These routes are ordered as follows.

1. orders/details
2. orders/{id}
3. orders/{customerName}
4. orders/{*date}
5. orders/pending

Notice that "details" is a literal segment and appears before "{id}", but "pending" appears last because the Order property is 1. 
(This example assumes there are no customers named "details" or "pending". 
In general, try to avoid ambiguous routes. 
In this example, a better route template for GetByCustomer is "customers/{customerName}" )


# Assemblies
=====================

System.Net.Http - Client and raw messaging types (HttpResponseMessage class)
System.Net.Http.Formatting - Model binding and media type formatters
System.Web.Http - Basic hosting infrastructure (ApiController class)
System.Web.Http.Common - Common APIs
System.Web.Http.WebHost - ASP.NET hosting
System.Web.Http.SelfHost - Self hosting
System.Web.Http.Data - DataController is an APIController that handles "CRUD" type operations
System.Web.Http.Data.EntityFramework - Specific implementations of DataController
System.Web.Http.Data.Helpers - Common code for data API

# Model binding and Formatters
===================================

1. By default the Web API will bind incoming data to CLR types.
    -Body, header, and or query string.
    -Very similar to model binding of ASP.NET MVC
    
2. MediaTypeFormatters are used to bind both input and output.
    -Mapped to content types
    
3. Validation via attributes can also be used

4. HttpRequestMessage and HttpResponseMessage can be used to go down further into the HTTP stack.
    -Enables you to directly set Headers etc.
    
# Media Type
=================

Media type (aka MIME type) specifies the format of the data as type/subtype e.g. text/html, text/xml, application/json, image/jpeg etc.
In HTTP request, MIME type is specified in the request header using Accept and Content-Type attribute. 
1. The Accept header attribute specifies the format of response data which the client expects. 
2. The Content-Type header attribute specifies the format of the data in the request body so that receiver can parse it into appropriate format.

Web API converts request data into CLR object and also serialize CLR object into response data based on Accept and Content-Type headers. 
Web API includes built-in support for JSON, XML, BSON, and form-urlencoded data. 
It means it automatically converts request/response data into these formats OOB (out-of the box).

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }
}

public class StudentController : ApiController
{
    public Student Post(Student student)
    {
        // save student into db
        var insertedStudent = SaveStudent(student);

        return insertedStudent;
    }
}

As you can see above, the Post() action method accepts Student type parameter, saves that student into DB and returns inserted student with generated id. 
The above Web API handles HTTP POST request with JSON or XML data and parses it to a Student object based on Content-Type header value 
and 
the same way it converts insertedStudent object into JSON or XML based on Accept header value.


# Media-Type Formatters
===========================

Media type formatters are classes responsible for serializing request/response data so that Web API can understand the request data format 
and send data in the format which client expects.

Web API includes following built-in media type formatters.

Media Type Formatter Class	            MIME Type	                        Description
JsonMediaTypeFormatter	                application/json, text/json	        Handles JSON format
XmlMediaTypeFormatter	                application/xml, text/json	        Handles XML format
FormUrlEncodedMediaTypeFormatter	    application/x-www-form-urlencoded	Handles HTML form URL-encoded data
JQueryMvcFormUrlEncodedFormatter	    application/x-www-form-urlencoded	Handles model-bound HTML form URL-encoded data

=> Retrieve Built-in Media Type Formatters
The following example demonstrates HTTP Get method that returns all built-in formatter classes.

public class FormattersController : ApiController
{
    public IEnumerable<string> Get()
    {
        IList<string> formatters = new List<string>();

        foreach (var item in GlobalConfiguration.Configuration.Formatters)
        {
            formatters.Add(item.ToString());
        }

        return formatters.AsEnumerable<string>();                                
    }
}

GlobalConfiguration.Configuration.Formatters returns MediaTypeFormatterCollection that includes all the formatter classes.
The above example returns names of all the formatter classes as XML file:

<string>System.Net.Http.Formatting.JsonMediaTypeFormatter</string>
<string>System.Net.Http.Formatting.XmlMediaTypeFormatter</string>
<string>System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter</string>
<string>System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter</string>

=> BSON Formatter
Web API also supports BSON format. As the name suggests, BSON is binary JSON, it is a binary-encoded serialization of JSON-like documents. 
Currently there is very little support for BSON and no JavaScript implementation is available for clients running in browsers. 
This means that it is not possible to retrieve and automatically parse BSON data to JavaScript objects.

Web API includes built-in formatter class BsonMediaTypeFormatter for BSON but it is disabled by default.

=> JSON Formatter
Web API includes JsonMediaTypeFormatter class that handles JSON format. 
The JsonMediaTypeFormatter converts JSON data in an HTTP request into CLR objects (object in C# or VB.NET) and 
also converts CLR objects into JSON format that is embeded within HTTP response.

Internally, JsonMediaTypeFormatter uses third-party open source library called Json.NET to perform serialization.

=> Configure JSON Serialization
JSON formatter can be configured in WebApiConfig class. 
The JsonMediaTypeFormatter class includes various properties and methods using which you can customize JSON serialization. 
For example, Web API writes JSON property names with PascalCase by default. 
To write JSON property names with camelCase, set the CamelCasePropertyNamesContractResolver on the serializer settings as shown below.

public static class WebApiConfig
{
    public static void Register(HttpConfiguration config)
    {
        config.MapHttpAttributeRoutes();
            
        config.Routes.MapHttpRoute(
            name: "DefaultApi",
            routeTemplate: "api/{controller}/{id}",
            defaults: new { id = RouteParameter.Optional }
        );

        // configure json formatter
        JsonMediaTypeFormatter jsonFormatter = config.Formatters.JsonFormatter;

        jsonFormatter.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
    }
}

=> XML Formatter
The XmlMediaTypeFormatter class is responsible for serializing model objects into XML data. 
It uses System.Runtime.DataContractSerializer class to generate XML data.


# Web API Filters
==============================

Web API includes filters to add extra logic before or after action method executes.
Filters are actually attributes that can be applied on the Web API controller or one or more action methods. 
Every filter attribute class must implement IFilter interface included in System.Web.Http.Filters namespace.

The following table lists important interfaces and classes that can be used to create Web API filters.

Filter Type	                Interface	            Class	                        Description
Simple Filter	            IFilter	                -	                            Defines the methods that are used in a filter
Action Filter	            IActionFilter	        ActionFilterAttribute	        Used to add extra logic before or after action methods execute.
Authentication Filter	    IAuthenticationFilter	-	                            Used to force users or clients to be authenticated before action methods execute.
Authorization Filter	    IAuthorizationFilter	AuthorizationFilterAttribute	Used to restrict access to action methods to specific users or groups.
Exception Filter	        IExceptionFilter	    ExceptionFilterAttribute	    Used to handle all unhandled exception in Web API.
Override Filter	            IOverrideFilter	        -	                            Used to customize the behaviour of other filter for individual action method

# Using exception filters in ASP.NET Web API
=================================================

To create an exception filter, you need to implement the IExceptionFilter interface. 
You can also create exception filters by extending the abstract class ExceptionFilterAttribute and then overriding the OnException method. 
Note that the ExceptionFilterAttribute abstract class in turn implements the IExceptionFilter interface.

You can register your exception filters in one of the following three ways:

1. At the action level
2. At the controller level
3. Globally

The following code snippet shows how you can apply a filter at the action level, i.e., to your controller action method.

public class EmployeesController : ApiController
{
    [NotImplementedExceptionFilter]
    public Employee GetEmployee(int id)
    {
        throw new NotImplementedException();
    }
}

To apply the exception filter at the controller level, you would need to use the filter attribute at the class level as shown below.

[DatabaseExceptionFilter]
public class EmployeesController : ApiController
{
    //Some code
}

You can also apply your custom exception filter globally so that it works for all of the Web API controllers. 

GlobalConfiguration.Configuration.Filters.Add(new DatabaseExceptionFilterAttribute());


# HttpClient
==================

The .NET 2.0 included WebClient class to communicate with web server using HTTP protocol. However, WebClient class had some limitations. 
The .NET 4.5 includes HttpClient class to overcome the limitation of WebClient.

The following table lists all the methods of HttpClient to send different HTTP requests.

Method Name	                Description
GetAsync	                Sends a GET request to the specified Uri as an asynchronous operation.
GetByteArrayAsync	        Sends a GET request to the specified Uri and returns the response body as a byte array in an asynchronous operation.
GetStreamAsync	            Sends a GET request to the specified Uri and returns the response body as a stream in an asynchronous operation.
GetStringAsync	            Sends a GET request to the specified Uri and returns the response body as a string in an asynchronous operation.
PostAsync	                Sends a POST request to the specified Uri as an asynchronous operation.
PostAsJsonAsync	            Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as JSON.
PostAsXmlAsync	            Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as XML.
PutAsync	                Sends a PUT request to the specified Uri as an asynchronous operation.
PutAsJsonAsync	            Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as JSON.
PutAsXmlAsync	            Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as XML.
DeleteAsync	                Sends a DELETE request to the specified Uri as an asynchronous operation.


# New features in Web API 2
=================================

In version 2.0, the Web API framework has been enhanced to support the following features:

1. IHttpActionResult return type
2. A new Routing Attribute
3. Support for Cross-Origin requests using CORS
4. Securing ASP.NET Web API using OAuth 2.0
5. Support for $expand, $select in OData Service

=> Using $select, $expand, and $value in ASP.NET Web API 2 OData
1. $expand causes related entities to be included inline in the response.
2. $select selects a subset of properties to include in the response.
3. $value gets the raw value of a property.

